# -*- coding: utf-8 -*-
"""crowd counting &Density Estimation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ivt9lqt0cTTapdZNldnHb5Mu-NiOtxRX
"""

!pip install opencv-python-headless scipy scikit-learn tensorflow matplotlib
from google.colab import files
uploaded = files.upload()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load image
filename = next(iter(uploaded))
image = cv2.imread(filename)
if image is None:
    raise ValueError("Image not loaded. Check the filename.")

# Convert image to RGB for visualization
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.imshow(image_rgb)
plt.axis('off')
plt.title("Uploaded Image")
plt.show()

# Generate a dummy density map with more simulated people
def generate_dummy_density_map(image):
    h, w = 224, 224
    resized = cv2.resize(image, (w, h)) / 255.0

    # Simulate people as bright blobs randomly placed (increase people and blob size)
    density = np.zeros((h, w), dtype=np.float32)
    for _ in range(100):  # Simulate 100 people
        x, y = np.random.randint(0, w), np.random.randint(0, h)
        # Create larger blobs to represent people
        cv2.circle(density, (x, y), 6, 1, -1)  # Bigger radius for better visibility

    return resized, density.reshape((h, w, 1))

# Prepare one sample
img_input, density_target = generate_dummy_density_map(image)
X_train = np.expand_dims(img_input, axis=0)
y_train = np.expand_dims(density_target, axis=0)

# Build a simple CNN model
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D

def build_model():
    inputs = Input(shape=(224, 224, 3))
    x = Conv2D(64, 3, activation='relu', padding='same')(inputs)
    x = MaxPooling2D(2)(x)
    x = Conv2D(128, 3, activation='relu', padding='same')(x)


    x = UpSampling2D(2)(x)  # Upsample to original size
    output = Conv2D(1, 1, activation='relu', padding='same')(x)
    return Model(inputs, output)






# Build and compile the model
model = build_model()
model.compile(optimizer='adam', loss='mse')

# Train the model for more epochs
model.fit(X_train, y_train, epochs=50)  # Increase epochs for better learning

# Make a prediction
prediction = model.predict(X_train)[0]
predicted_count = np.sum(prediction)

# Visualize the results
plt.figure(figsize=(12, 5))

# Show original image
plt.subplot(1, 2, 1)
plt.imshow(image_rgb)
plt.title("Original Image")
plt.axis('off')

# Show predicted density map
plt.subplot(1, 2, 2)
plt.imshow(prediction.squeeze(), cmap='jet')
plt.title(f"Predicted Density Map\nEstimated Count: {int(predicted_count)}")
plt.axis('off')

plt.tight_layout()
plt.show()

# Print the estimated crowd count
print(f"âœ… Estimated Crowd Count: {int(predicted_count)}")